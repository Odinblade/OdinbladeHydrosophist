[Vertex shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"
#include "/Shaders/GlobalConstants_OGL.shdh"

in vec3 inPosition0;
in vec4 inNormal0;
in vec2 inTexCoord0;

out vec4 Position0;
out vec3 TexCoord0;
out vec2 TexCoord1;
out vec3 TexCoord2;
out float TexCoord3;
out float DistanceFog;

uniform mat4x4 WorldMatrix;

void main()
{
	//World space position
	vec4 worldPosition = (WorldMatrix * vec4(inPosition0, 1.0f));

	//Projected position
	vec4 projectedPosition = (global_ViewProjection * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	//Compute local tangent frame
	mat3x3 LocalTangentFrame = GetTangentFrame(inNormal0);

	vec3 LocalNormal = LocalTangentFrame[2];

	//Normalize Local Normal
	vec3 localNormalNormalized = normalize(LocalNormal);

	//World space Normal
	vec3 worldNormal = (mat3x3(WorldMatrix[0].xyz, WorldMatrix[1].xyz, WorldMatrix[2].xyz) * localNormalNormalized);

	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(worldNormal);

	TexCoord0 = worldNormalNormalized;

	TexCoord1 = inTexCoord0;
	//World space view vector
	vec3 worldView = (global_ViewPos.xyz - worldPosition.xyz);

	TexCoord2 = worldView;

	//Calculate Height Fog
	float depthValue = clamp(((global_FogPropertyMatrix[3].y - length(worldView)) / (global_FogPropertyMatrix[3].y - global_FogPropertyMatrix[3].x)), 0, 1);
	float heightDensity = ((worldPosition.y - global_FogPropertyMatrix[2].z) / global_FogPropertyMatrix[3].z);
	float heightFog = clamp(max(depthValue, heightDensity), 0, 1);

	TexCoord3 = heightFog;

	//Calculate Distance Fog
	float distanceFog = clamp(((global_FogPropertyMatrix[2].y - length(worldView)) / (global_FogPropertyMatrix[2].y - global_FogPropertyMatrix[2].x)), 0, 1);

	DistanceFog = distanceFog;

	gl_Position = Position0;
}


[Fragment shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"
#include "/Shaders/GLSL3/Deferred.shdh"
#include "/"
#include "/Shaders/GlobalConstants_PS_OGL.shdh"

in vec4 Position0;
in vec3 TexCoord0;
in vec2 TexCoord1;
in vec3 TexCoord2;
in float TexCoord3;
in float DistanceFog;

out vec4 outColor0;

uniform float _OpacityFade;
uniform sampler2D Texture2DParameter_d5f0bbd13eaa417daf2f7f12ee516b17_DefaultWrapSampler;
uniform sampler2D Texture2DParameter_e34b4ff04cbb4ec6b464e7b0efd7be9d_DefaultWrapSampler;
uniform sampler2D Texture2DParameter_d05006397acf4612938d1d4da6812f16_DefaultWrapSampler;

void CalculateMatBaseColor(vec2 in_0,
	out vec3 out_0)
{
	vec4 Local0 = texture(Texture2DParameter_d5f0bbd13eaa417daf2f7f12ee516b17_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	float Local2 = Local0.w;
	out_0 = Local1;
}

void CalculateMatMetalMask(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_e34b4ff04cbb4ec6b464e7b0efd7be9d_DefaultWrapSampler, in_0);
	//[Local0] Convert normalmaps to tangent space vectors
	Local0.xyzw = Local0.wzyx;
	Local0.xyz = ((Local0.xyz * 2.0f) - 1.0f);
	Local0.z = -(Local0.z);
	Local0.xyz = normalize(Local0.xyz);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	out_0 = Local1.x;
}

void CalculateMatReflectance(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_d5f0bbd13eaa417daf2f7f12ee516b17_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	float Local2 = Local0.w;
	out_0 = Local2;
}

void CalculateMatRoughness(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_d05006397acf4612938d1d4da6812f16_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	out_0 = Local1.x;
}

void main()
{
	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(TexCoord0);

	vec3 matBaseColor;
	CalculateMatBaseColor(TexCoord1, matBaseColor);
	float matMetalMask;
	CalculateMatMetalMask(TexCoord1, matMetalMask);
	float matReflectance;
	CalculateMatReflectance(TexCoord1, matReflectance);
	matReflectance = RemapReflectance(matReflectance);
	float matRoughness;
	CalculateMatRoughness(TexCoord1, matRoughness);
	matRoughness = max(0.09f, matRoughness);
	vec3 FinalColor = vec3(0.0f, 0.0f, 0.0f);

	//Calculate Image Based Lighting
	//Normalized world space view vector
	vec3 worldViewNormalized = normalize(TexCoord2);

	vec3 iblDiffuse;
	vec3 iblSpecular;
	EvaluateDistantIBL(matBaseColor, matRoughness, vec3(matReflectance, matReflectance, matReflectance), matMetalMask, worldNormalNormalized, worldViewNormalized, iblDiffuse, iblSpecular);
	FinalColor = ((FinalColor + iblDiffuse) + iblSpecular);

	vec3 LightDiffuseColorOut;
	vec3 LightSpecularColorOut;
	DirectionLight(worldNormalNormalized, worldViewNormalized, global_LightPropertyMatrix, matBaseColor, matReflectance, matRoughness, matMetalMask, LightDiffuseColorOut, LightSpecularColorOut);
	FinalColor = ((FinalColor + LightDiffuseColorOut) + LightSpecularColorOut);

	FinalColor = PreExpose(FinalColor);

	FinalColor = mix(global_FogPropertyMatrix[1], FinalColor, vec3(TexCoord3, TexCoord3, TexCoord3));
	FinalColor = mix(global_FogPropertyMatrix[0], FinalColor, vec3(DistanceFog, DistanceFog, DistanceFog));

	outColor0 = vec4(FinalColor, _OpacityFade);
	outColor0 = max(outColor0, 0.0f);
}
