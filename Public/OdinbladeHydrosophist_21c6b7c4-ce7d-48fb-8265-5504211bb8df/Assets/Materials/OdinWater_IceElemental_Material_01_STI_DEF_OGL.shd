[Vertex shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"
#include "/Shaders/GlobalConstants_OGL.shdh"

in vec3 inPosition0;
in vec4 inColor1;
in vec4 inColor2;
in vec4 inColor3;
in vec4 inNormal0;
in vec2 inTexCoord0;

out vec4 Position0;
out vec3 TexCoord0;
out vec2 TexCoord1;

void main()
{
	//Create Instance World Matrix
	vec4 col1 = vec4(inColor1.x, inColor1.y, inColor1.z, 0.0f);
	vec4 col2 = vec4(inColor1.w, inColor2.x, inColor2.y, 0.0f);
	vec4 col3 = vec4(inColor2.z, inColor2.w, inColor3.x, 0.0f);
	vec4 col4 = vec4(inColor3.y, inColor3.z, inColor3.w, 1.0f);
	mat4x4 WorldMatrix = mat4x4(col1, col2, col3, col4);

	//World space position
	vec4 worldPosition = (WorldMatrix * vec4(inPosition0, 1.0f));

	//Projected position
	vec4 projectedPosition = (global_ViewProjection * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	//Compute local tangent frame
	mat3x3 LocalTangentFrame = GetTangentFrame(inNormal0);

	vec3 LocalNormal = LocalTangentFrame[2];

	//Normalize Local Normal
	vec3 localNormalNormalized = normalize(LocalNormal);

	//World space Normal
	vec3 worldNormal = (mat3x3(WorldMatrix[0].xyz, WorldMatrix[1].xyz, WorldMatrix[2].xyz) * localNormalNormalized);

	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(worldNormal);

	vec3 viewSpaceNormal = (mat3x3(global_View[0].xyz, global_View[1].xyz, global_View[2].xyz) * worldNormalNormalized);

	TexCoord0 = viewSpaceNormal;

	TexCoord1 = inTexCoord0;
	gl_Position = Position0;
}


[Fragment shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"
#include "/Shaders/GLSL3/Deferred.shdh"

in vec4 Position0;
in vec3 TexCoord0;
in vec2 TexCoord1;

out vec4 outColor0;
out vec4 outColor1;
out vec4 outColor2;
out vec4 outColor3;

uniform sampler2D Texture2DParameter_d5f0bbd13eaa417daf2f7f12ee516b17_DefaultWrapSampler;
uniform sampler2D Texture2DParameter_e34b4ff04cbb4ec6b464e7b0efd7be9d_DefaultWrapSampler;
uniform sampler2D Texture2DParameter_d05006397acf4612938d1d4da6812f16_DefaultWrapSampler;
uniform float _OpacityFade;

void CalculateMatBaseColor(vec2 in_0,
	out vec3 out_0)
{
	vec4 Local0 = texture(Texture2DParameter_d5f0bbd13eaa417daf2f7f12ee516b17_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	float Local2 = Local0.w;
	out_0 = Local1;
}

void CalculateMatMetalMask(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_e34b4ff04cbb4ec6b464e7b0efd7be9d_DefaultWrapSampler, in_0);
	//[Local0] Convert normalmaps to tangent space vectors
	Local0.xyzw = Local0.wzyx;
	Local0.xyz = ((Local0.xyz * 2.0f) - 1.0f);
	Local0.z = -(Local0.z);
	Local0.xyz = normalize(Local0.xyz);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	out_0 = Local1.x;
}

void CalculateMatReflectance(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_d5f0bbd13eaa417daf2f7f12ee516b17_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	float Local2 = Local0.w;
	out_0 = Local2;
}

void CalculateMatRoughness(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_d05006397acf4612938d1d4da6812f16_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	out_0 = Local1.x;
}

void main()
{
	vec3 viewNormalNormalized = normalize(TexCoord0);

	vec3 matBaseColor;
	CalculateMatBaseColor(TexCoord1, matBaseColor);
	float matMetalMask;
	CalculateMatMetalMask(TexCoord1, matMetalMask);
	float matReflectance;
	CalculateMatReflectance(TexCoord1, matReflectance);
	float matRoughness;
	CalculateMatRoughness(TexCoord1, matRoughness);
	GBufferData gBufferData;
	gBufferData.Emissive = vec3(0.0f, 0.0f, 0.0f);
	gBufferData.ViewSpaceNormal = viewNormalNormalized;
	gBufferData.BaseColor = matBaseColor;
	gBufferData.FadeOpacity = _OpacityFade;
	gBufferData.Roughness = matRoughness;
	gBufferData.Reflectance = matReflectance;
	gBufferData.MetalMask = matMetalMask;
	gBufferData.FXEmissive = true;
	gBufferData.ShadingModel = 0;
	gBufferData.Custom = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	EncodeGBufferData(gBufferData, outColor0, outColor1, outColor2, outColor3);
}
